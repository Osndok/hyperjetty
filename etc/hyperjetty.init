#!/bin/sh
#
# hyperjetty - java servlet container hypervisor
#
# chkconfig:   35 85 15
# description: java servlet container hypervisor
#

# Source function library.
. /etc/rc.d/init.d/functions

exec="/usr/sbin/hyperjettyd"
prog=$(basename $exec)

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

user=hyperjetty
logfile=/var/log/hyperjetty/service.log
pidfile=/var/run/$prog
lockfile=/var/lock/subsys/$prog

if [ -n "${HJ_STARTUP_BYPASS:-}" ]; then
	# We are now running as the correct user, so it's important not to echo anything to stderr
	# because we don't have permission to write to the terminal (?!).
	# Let's just go ahead and run the desired program in daemon mode, print the pid & exit...
	bash -m -c "{ $exec >> $logfile 2>&1 & }; echo \$!" || exit 1
	exit 0
fi

# b/c calling "$*" from inside a function is a bit meaningless.
export HJ_ORIGINAL_STARTUP_COMMAND="$0 $*"

start()
{
    echo -n $"Starting $prog: "
    #daemon $exec... is not working? blocks shell.
    #retval=$?
	if status ; then
		retval=1
		echo -n "$prog seems to be running already" && warning
		echo
    else
		# This method makes a process that lingers...
		#nohup runuser -s /bin/bash $user -c "${exec}" >> $logfile 2>&1 &
		#PID=$!

		# Run ourself again (as a sub-program) with the correct user
		export HJ_STARTUP_BYPASS=true
		PID=$(runuser -s /bin/bash $user -c "$HJ_ORIGINAL_STARTUP_COMMAND")
		retval=$?

		[ $retval -eq 0 ] && touch ${lockfile} && success || failure
		echo
		echo $PID > ${pidfile}
    fi
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop()
{
    echo -n $"Stopping $prog: "

	if status; then
		PID=$(cat ${pidfile})
		kill $PID
		rm -f ${pidfile}
	else
		retval=1
		echo -n "$prog already seems to be stopped" && warning
		echo
	fi
    #/usr/bin/hj shutdown
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    sleep 1
    start
}

status()
{
	retval=1
	if [ -s "${pidfile}" ]; then
		PID=$(cat "${pidfile}")
		if [ ! -e "/proc/$PID" ]; then
			echo 2>&1 "$prog is dead, but subsystem is locked, pid was $PID"
		elif grep -q java "/proc/$PID/cmdline" ; then
			echo 2>&1 "$prog is running, pid = $PID"
			retval=0
		elif grep -q runuser "/proc/$PID/cmdline" ; then
			echo 2>&1 "$prog is running, pid = $PID (runuser)"
			retval=0
		else
			echo 2>&1 "pid $PID is running, but does not seem to be hyperjetty"
		fi
	else
		echo 2>&1 "no pid file: ${pidfile}"
	fi
	return $retval
}

case "$1" in
    start|stop|restart)
        $1
        ;;
    force-reload)
        restart
        ;;
    status)
        status $prog
        ;;
    try-restart|condrestart)
        if status $prog >/dev/null ; then
            restart
        fi
	;;
    reload)
        status $prog >/dev/null || exit 7
        exec /usr/bin/hj reload
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|reload|restart|try-restart|force-reload}"
        exit 2
esac
